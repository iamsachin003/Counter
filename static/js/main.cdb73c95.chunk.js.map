{"version":3,"sources":["Components/Button.tsx","Components/Input.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["StyledButton","styled","button","props","backgroundColor","color","borderRadius","Button","children","onButtonChange","rest","onClick","StyledInput","input","Input","type","inputChange","onChange","App","React","useState","maxValue","minValue","count","setCount","handleInputChange","useCallback","e","test","target","value","IncrementCounter","DecrementCounter","Fragment","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+QAaMA,EAAeC,IAAOC,OAAV,6OACM,SAACC,GAAD,OAAwBA,EAAMC,mBACzC,SAACD,GAAD,OAAwBA,EAAME,SAMtB,SAACF,GAAD,OAAwBA,EAAMG,gBAYpCC,EARA,SAAC,GAAgD,IAA9CC,EAA6C,EAA7CA,SAAUC,EAAmC,EAAnCA,eAAmBC,EAAgB,iBAC3D,OACI,cAACV,EAAD,yBAAcW,QAASF,GAAoBC,GAA3C,aACKF,M,yBCnBPI,EAAcX,IAAOY,MAAV,+NAiBFC,EAND,SAAC,GAAgD,IAA9CC,EAA6C,EAA7CA,KAAMC,EAAuC,EAAvCA,YAAgBN,EAAuB,iBAC1D,OACI,cAACE,EAAD,aAAaG,KAAMA,EAAME,SAAUD,GAAiBN,KCoB7CQ,G,MArCH,WACV,MAAmBC,IAAMC,SAAiB,KAAnCC,EAAP,oBACA,EAAmBF,IAAMC,SAAiB,GAAnCE,EAAP,oBACA,EAA0BH,IAAMC,SAAN,OAAuBE,QAAvB,IAAuBA,IAAY,GAA7D,mBAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAoBN,IAAMO,aAAY,SAACC,GAC7B,aACJC,KAAKD,EAAEE,OAAOC,SAAWH,EAAEE,OAAOC,OAAST,GACnDG,GAAUG,EAAEE,OAAOC,SAEpB,CAACT,IAEEU,EAAmBZ,IAAMO,aAAY,WACrCH,IAAUF,GACdG,EAASD,EAAQ,KAChB,CAACA,EAAOF,IAELW,EAAmBb,IAAMO,aAAY,WACrCH,IAAUD,GACdE,EAASD,EAAQ,KAChB,CAACA,EAAOD,IAEX,OACE,eAAC,IAAMW,SAAP,WACE,qBAAIC,UAAU,SAAd,yBAAoCZ,EAApC,iBAA4DD,KAC5D,sBAAKa,UAAU,oBAAf,UACE,cAAC,EAAD,CAAQnB,KAAK,SAASX,gBAAgB,UAAUC,MAAM,UAAUC,aAAa,cAC3EG,eAAgBuB,EADlB,eAEA,cAAC,EAAD,CAAOjB,KAAK,OAAOe,MAAOP,EAAOP,YAAaS,IAC9C,cAAC,EAAD,CAAQV,KAAK,SAASX,gBAAgB,UAAUC,MAAM,UAAUC,aAAa,cAC3EG,eAAgBsB,EADlB,uBCpBOI,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.cdb73c95.chunk.js","sourcesContent":["import React, { ReactNode } from 'react';\r\nimport styled from \"styled-components\";\r\n\r\n\r\ninterface ButtonProps {\r\n    type: 'button' | 'submit',\r\n    children: ReactNode,\r\n    color: string,\r\n    backgroundColor: string,\r\n    borderRadius: string,\r\n    onButtonChange: React.MouseEventHandler<HTMLButtonElement>;\r\n}\r\n\r\nconst StyledButton = styled.button`\r\n    background-color: ${(props: ButtonProps) => props.backgroundColor};\r\n    color: ${(props: ButtonProps) => props.color};\r\n    cursor: pointer;\r\n    padding: 10px;\r\n    width: 60px;\r\n    font-size: 22px;\r\n    border: 1px solid #B24242;\r\n    border-radius: ${(props: ButtonProps) => props.borderRadius};\r\n    font-weight: bolder\r\n`\r\n\r\nconst Button = ({ children, onButtonChange, ...rest }: any) => {\r\n    return (\r\n        <StyledButton onClick={onButtonChange} {...rest} >\r\n            {children}\r\n        </StyledButton>\r\n    )\r\n}\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ntype InputProps = {\r\n    type: string,\r\n    value: number,\r\n    inputChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nconst StyledInput = styled.input`\r\n    width: 60px;\r\n    background-color: #ffe6ea;\r\n    border: 1px solid #B24242;\r\n    padding: 10px;\r\n    font-size: 22px;\r\n    color: #B24242;\r\n    font-weight: bolder;\r\n    text-align: center\r\n`;\r\n\r\nconst Input = ({ type, inputChange, ...rest }: InputProps) => {\r\n    return (\r\n        <StyledInput type={type} onChange={inputChange} {...rest}></StyledInput>\r\n    )\r\n}\r\n\r\nexport default Input;\r\n","import React, { ChangeEvent } from 'react';\nimport Button from './Components/Button';\nimport Input from './Components/Input';\nimport './App.css';\n\nconst App = () => {\n  const [maxValue] = React.useState<number>(100);\n  const [minValue] = React.useState<number>(1);\n  const [count, setCount] = React.useState<number>(minValue ?? 1);\n\n  const handleInputChange = React.useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const regex = /^[0-9\\b]+$/;\n    if (regex.test(e.target.value) && +e.target.value <= maxValue) {\n      setCount(+e.target.value)\n    }\n  }, [maxValue])\n\n  const IncrementCounter = React.useCallback(() => {\n    if (count === maxValue) return;\n    setCount(count + 1)\n  }, [count, maxValue])\n\n  const DecrementCounter = React.useCallback(() => {\n    if (count === minValue) return;\n    setCount(count - 1)\n  }, [count, minValue])\n\n  return (\n    <React.Fragment>\n      <h4 className=\"header\">Min Value : {minValue} | Max Value: {maxValue}</h4>\n      <div className=\"counter-container\">\n        <Button type=\"button\" backgroundColor=\"#ffffff\" color=\"#B24242\" borderRadius=\"8px 0 0 8px\"\n          onButtonChange={DecrementCounter}>-</Button>\n        <Input type=\"text\" value={count} inputChange={handleInputChange} />\n        <Button type=\"button\" backgroundColor=\"#B24242\" color=\"#ffffff\" borderRadius=\"0 8px 8px 0\"\n          onButtonChange={IncrementCounter}\n        >+</Button>\n      </div>\n    </React.Fragment>\n  )\n}\n\nexport default App;\n\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}